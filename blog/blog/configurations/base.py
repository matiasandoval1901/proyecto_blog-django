"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-^g0qi6we6%1d1f-=6^rtw7i7-0m1qtminftndfw-x#j_+kbozi')

# Application definition
# Define las aplicaciones instaladas en el proyecto.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'apps.post',
    'apps.user',
    'apps.contacto'
]

# Define los middleware que se aplicarán a las solicitudes y respuestas de la aplicación.
# Los middleware son una serie de hooks o ganchos que se ejecutan antes o después de una vista.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog.urls'

AUTH_USER_MODEL = 'user.User'

DEFAULT_POST_IMAGE = 'post/default/post_default.png'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# Define las validaciones que se aplicarán a las contraseñas de los usuarios.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-ar'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

# Define si se activa o no la traducción de los textos de la aplicación.
USE_I18N = True

# Define si se activa o no el uso de la zona horaria.
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# En desarrollo y producción:
# Define el prefijo de URL para los archivos estáticos.
# Al hacer referencia a archivos estáticos en las plantillas, Django buscará los archivos en esta ruta.
STATIC_URL = '/static/'

# STATICFILES_DIRS: Se usa principalmente en desarrollo para decirle a Django
# dónde encontrar archivos estáticos adicionales. 
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] 

# STATIC_ROOT: Es necesario para producción y
# define dónde se guardarán todos los archivos estáticos después de ejecutar collectstatic. 
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 

# URL base para acceder a los archivos subidos por los usuarios
# Seguridad: Asegurarse de validar los tipos de archivo permitidos y aplicar
# otras medidas de seguridad para evitar que se suban archivos maliciosos.
# Por supuesto se podria considerar usar un servicio de almacenamiento en la nube como AWS S3. 
MEDIA_URL = '/media/'

# Directorio donde se almacenarán los archivos subidos 
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
 # Define el tipo de campo de clave primaria que se utilizará para todos los modelos de Django.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'